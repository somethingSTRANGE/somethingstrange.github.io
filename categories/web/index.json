[{"content":"Markdown goes here.\nMarkdown goes here.\nTEST\nEN\nAdded \u0026ldquo;meta_image\u0026rdquo; front matter.\nAdded \u0026ldquo;image\u0026rdquo; front matter.\n","description":"DESCRIPTION","id":0,"section":"showcase","tags":null,"title":"Thief: The Dark Project","uri":"http://somethingstrange.com/showcase/games/thief/"},{"content":"Markdown goes here.\nMarkdown goes here.\nTEST\nEN\nAdded \u0026ldquo;meta_image\u0026rdquo; front matter.\nAdded \u0026ldquo;image\u0026rdquo; front matter.\n","description":"DESCRIPTION","id":1,"section":"showcase","tags":null,"title":"Thief 2: The Metal Age","uri":"http://somethingstrange.com/showcase/games/thief2/"},{"content":"Font Awesome is an icon font. It\u0026rsquo;s used all over the place. I use it when developing editor tools for my Unity projects. I love it. It\u0026rsquo;s awesome.\nI just started working on this site and I chose to build it with Hugo, which is a very popular open-source static site generator. So far, I like it a lot, but I was keenly interested in adding support for Font Awesome.\nAfter searching the web for bit, I came across a few posts detailing methods for adding support in Hugo. Unfortunately, most appeared to be written with the assumption that the reader was very experienced the Hugo. Since I just started working with Hugo and had not previously used Go or its templating language, I couldn\u0026rsquo;t seem to get things working.\nI eventually came across a 2018 article by Nick Glabreath titled Using Font Awesome Icons in Hugo which helped a lot. Shortly afterward, I found a more recent article by Micah R Ledbetter titled Inline FontAwesome SVGs in Hugo, which built upon Galbreath\u0026rsquo;s but included a few enhancements. Using those articles, I was able to get Font Awesome icons working.\nYou should certainly review the Galbreath and Ledbetter articles if you\u0026rsquo;d like details on:\n how to setup Font Awesome on websites using site header or footer templates, as well as the downsides to using that method. where to download the latest Font Awesome release or even how to automate the download of selected icons from the GitHub repository. the incremental steps at improving the integration.  Quick and Easy I\u0026rsquo;m just going to summarize the end results of my setup and briefly discuss any changes I\u0026rsquo;ve made.\nDownload Font Awesome I have an active subscription to Font Awesome Pro, so I just downloaded the latest release from their website, but you can download the latest release or the free icon set from the GitHub repository. As of October 2021, the latest release contains 7,864 pro icons and 1,608 free icons.\nCopy the SVGs to your root site folder Some of the other articles have you place the SVG (scalable vector graphics) files inside your theme folder, however Hugo is designed for customization with a layer-like site generation workflow. This allows you to modify your site and override your theme without actually changing the theme code or folder structure. Here\u0026rsquo;s a short post illustrating how Hugo Theme Layering works. Ideally nothing should be changed inside the theme folder, and that includes adding your Font Awesome SVGs. So they\u0026rsquo;ll be added to the root instead.\nThe SVGs were extracted from the archive and placed in the fontawesome folder, leaving me with a hierarchy like this:\n  \u0026lt;root\u0026gt;\n config\n content\n‚Ä¶\n fontawesome\n brands\n duotone\n light\n regular\n solid\n\u0026hellip;\n static\n static\n themes\n If you\u0026rsquo;re using the free version of Font Awesome, you may only have a few of those folders, such as solid and brands.\nAdd the partial Create a partial file: \u0026lt;root\u0026gt;/layouts/partials/fontawesome.html\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;span class=\u0026#34;fontawesome-inline-svg\u0026#34; style=\u0026#34;display:inline-block; height:0.9em; width:0.9em; top:0.1em; position:relative;\u0026#34;\u0026gt; {{- $fname:=print \u0026#34;fontawesome/\u0026#34; .style \u0026#34;/\u0026#34; .icon \u0026#34;.svg\u0026#34; -}} {{- if (fileExists $fname) -}} {{- $svg := readFile $fname -}} {{- $commentStrippedSvg := replaceRE \u0026#34;\u0026lt;!--[^\u0026gt;]*--\u0026gt;\u0026#34; \u0026#34;\u0026#34; $svg -}} {{- $filledPathSvg := replace $commentStrippedSvg \u0026#34;\u0026lt;path\u0026#34; \u0026#34;\u0026lt;path fill=\u0026#39;currentColor\u0026#39;\u0026#34; -}} {{- $filledPathSvg | safeHTML -}} {{- else -}} \u0026lt;span title=\u0026#34;Could not find \u0026amp;quot;{{.icon}}\u0026amp;quot; icon with \u0026amp;quot;{{.style}}\u0026amp;quot; style\u0026#34;\u0026gt;\u0026amp;#xFFFD;\u0026lt;/span\u0026gt; {{- end -}} \u0026lt;/span\u0026gt;   Note that this partial differs from Ledbetter\u0026rsquo;s in a few ways.\n The font style is separated from the icon in the shortcode (more on that below) and those parameters are passed to the partial as the .style and .icon. This partial was placed outside the theme, so the theme folder path is no longer needed in the $fname variable. There\u0026rsquo;s a check to see if the file exists before rendering it. If it doesn\u0026rsquo;t exist, the replacement glyph (ÔøΩ) will be shown instead. The span wrapping the replacement character also has a tooltip that includes the icon and style names being used, which may be useful for debugging the missing icon. Most importantly, this check allows Hugo to successfully rebuild the page, otherwise the build will fail when readFile fails to load the missing SVG file.  Add the shortcodes For each shortcode you want to use, create a file at: \u0026lt;root\u0026gt;/layouts/shortcodes/. I created a shortcode for each of the Font Awesome styles (brands, duotone, light, regular, solid). If you\u0026rsquo;re using the free version, you probably won\u0026rsquo;t need them all.\n  \u0026lt;root\u0026gt;\n layouts\n shortcodes\n fab.html\n fad.html\n fal.html\n far.html\n fas.html\n Here\u0026rsquo;s what fas.html looks like:\n1  {{ partial \u0026#34;fontawesome.html\u0026#34; (dict \u0026#34;style\u0026#34; \u0026#34;solid\u0026#34; \u0026#34;icon\u0026#34; ( .Get 0 )) }}   The only thing that differs in fab.html is that the style parameter was changed to brands:\n1  {{ partial \u0026#34;fontawesome.html\u0026#34; (dict \u0026#34;style\u0026#34; \u0026#34;brands\u0026#34; \u0026#34;icon\u0026#34; ( .Get 0 )) }}   Be sure to use duotone, light, and regular in the other files, if you create them.\nThe final shortcode I created is style agnostic, but allows the style to be specified when the shortcode is used. I\u0026rsquo;m not sure I\u0026rsquo;ll use this shortcode, since the others are shorter and require less typing, but it\u0026rsquo;s here anyhow.\n  fa.html\n 1  {{ partial \u0026#34;fontawesome.html\u0026#34; (dict \u0026#34;style\u0026#34; (.Get 0) \u0026#34;icon\u0026#34; (.Get 1)) }}   Shortcode Usage In markdown content, the just use one of the new shortcodes, such as fas for the solid style and fab for brands, followed by the icon name.\n1  I love {{\u0026lt; fas icons \u0026gt;}}{{\u0026lt; far icons \u0026gt;}}{{\u0026lt; fal icons \u0026gt;}}{{\u0026lt; fad icons \u0026gt;}} icons and {{\u0026lt; fab unity \u0026gt;}} Unity!    I love    .fa-secondary{opacity:.4} icons and  Unity!\n If you want to use the alternate fa shortcode with a bit of color:\n1  It\u0026#39;s \u0026lt;span style=\u0026#34;color:orange\u0026#34;\u0026gt;{{\u0026lt; fa duotone jack-o-lantern \u0026gt;}}\u0026lt;/span\u0026gt; time!    It\u0026rsquo;s .fa-secondary{opacity:.4}  time!\n Have fun with icons! .fa-secondary{opacity:.4} .fa-secondary{opacity:.4} .fa-secondary{opacity:.4} .fa-secondary{opacity:.4} .fa-secondary{opacity:.4} .fa-secondary{opacity:.4} .fa-secondary{opacity:.4} .fa-secondary{opacity:.4} \n","description":"A few basic steps to integrate Font Awesome with a Hugo site.","id":2,"section":"posts","tags":["Hugo","Font Awesome"],"title":"Hugo with Font Awesome","uri":"http://somethingstrange.com/posts/hugo-with-fontawesome/"},{"content":"   \nUNITY UNITY UNITY     Use the following fonts and point sizes for headlines, text, annotations, and non-Latin characters.\n HEADLINES ‚ûî PLATFORM MEDIUM CAPS ‚ûî TRACKING 190PT ‚ûî LEADING = TYPE SIZE + 10% TEXT ‚ûû INTER REGULAR ‚ûû TRACKING 10PT ‚ûû LEADING = TYPE SIZE + 10% TEXT ü†ñ INTER BOLD ü†ñ TRACKING 10PT ü†ñ LEADING = TYPE SIZE + 10% ANNOTATIONS ‚ü∂ INTER BOLD CAPS ‚ü∂ TRACKING 270PT ‚ü∂ LEADING = TYPE SIZE + 20% NON-LATIN ‚ûú NOTO SANS CKJ KR ‚ü∂ ‚üµ ‚Üê ‚Üí ‚Üñ ‚Üó ‚Üò ‚Üô ‚Üî ‚Üë ‚Üì   There. I said it.\nFA-Solid  FA-Regular  FA-Light  FA-Duotone .fa-secondary{opacity:.4} FA-Brands  FAS  FAL  FAR  FAD .fa-secondary{opacity:.4} FAB  fas\tSolid\nfar\tRegular\nfal\tLight\nfad\tDuotone\nfab\tBrands\nAccording to Microsoft\u0026rsquo;s C# Programming Guide, fields should rarely be public.\n Generally, you should use fields only for variables that have private or protected accessibility. Data that your type exposes to client code should be provided through methods, properties, and indexers.\n It\u0026rsquo;s unfortunate that the Unity website features so many simple code samples that feature public fields being used, especially since Unity provides the SerializedField attribute which can be applied to private fields, allowing them to be serialized and shown in the Inspector the same way public¬†fields are. They really should replace all those poor examples. In general, using public fields is a bad practice, and you really shouldn\u0026rsquo;t be using them in your project without an exceptional reason.\n1 2 3 4 5 6 7 8 9  public int item1; // Bad. Don\u0026#39;t do this. [SerializeField] private int item2; // Good.  // A public property with just a public \u0026#34;getter\u0026#34; can be used to allow outside // classes to access its value, but not change it. public int Item2 { get =\u0026gt; item2; private set =\u0026gt; item2 = value; }   A properly encapsulated class hides its internal data and behaviors from its users, and only exposes properties and methods that need to be shared outside the class.\nUse Properties to expose data to outside classes When a class needs to share its data with an outside class, When necessary, explicit data accessors should be used for public access to class data.\nIn C#, this encapsulation can be achieved using properties. There are numerous advantages to using properties over fields, such as being able to make data \u0026ldquo;read-only\u0026rdquo; or \u0026ldquo;write-only\u0026rdquo;, being able to validate data when it\u0026rsquo;s set, and sending out event notifications when data is changed, to name a few. That last item is what I\u0026rsquo;ll be covering in this post, but more on that later.\nI really love working with the Unity game engine, but there are certainly a lot of things that can be frustrating when working with it. One of these is that Unity only serializes public fields and private fields with the SerializeField attribute.\n1 2 3 4  public int publicInteger; [SerializeField] private int privateInteger;   The above fields will show up in the Inspector and can be edited there.\n","description":"A short list of Unity annoyances, none of which are deal breakers.","id":3,"section":"posts","tags":null,"title":"Unity Annoyances","uri":"http://somethingstrange.com/posts/unity-annoyances/"},{"content":"It\u0026rsquo;s a commonly accepted best practice that fields should be private, inaccessible to outside classes, and not be part of an API. When necessary, explicit data accessors should be used for public access to class data.\nIn C#, this encapsulation can be achieved using properties. There are numerous advantages to using properties over fields, such as being able to make data \u0026ldquo;read-only\u0026rdquo; or \u0026ldquo;write-only\u0026rdquo;, being able to validate data when it\u0026rsquo;s set, and sending out event notifications when data is changed, to name a few. That last item is what I\u0026rsquo;ll be covering in this post, but more on that later.\nI really love working with the Unity game engine, but there are certainly a lot of things that can be frustrating when working with it. One of these is that Unity only serializes public fields and private fields with the SerializeField attribute.\n1 2 3 4  public int publicInteger; [SerializeField] private int privateInteger;   The above fields will show up in the Inspector and can be edited there.\nIt doesn\u0026rsquo;t serialize properties in any way. Furthermore, those serialized fields can be shown in the Unity Inspector and the user can adjust field data using Unity\u0026rsquo;s UI. That\u0026rsquo;s certainly handy, but since the changes are being applied directly to fields, it makes it more difficult to validate data and send out change notifications.\nUnity offers the magic OnValidate method that you can implement to identify when any changes are made in the inspector, but it doesn\u0026rsquo;t tell you what changed, just that something did. So then you\u0026rsquo;ll need to look at all relevant data to identify what happened and determine whether you need to call other logic to handle the change.\npublic int number; private int number; public int Number { get =\u0026gt; number; set =\u0026gt; number = value; } XXX\nYYY\nLinks https://www.microsoft.com/store/productId/9N0DX20HK701\nhttps://github.com/microsoft/terminal\n The Windows Terminal is a modern, fast, efficient, powerful, and productive terminal application for users of command-line tools and shells like Command Prompt, PowerShell, and WSL. Its main features include multiple tabs, panes, Unicode and UTF-8 character support, a GPU accelerated text rendering engine, and custom themes, styles, and configurations.\n üö¶ü§∏‚Äç‚ôÇÔ∏èüöôüöóüöï\nFormatting Paragraphs are separated by a blank line.\nEmphasis is given with italic, bold, and monospace.\nEmphasis is given with *italic*, **bold**, and `monospace`. Lists Itemized lists\n item 1 item 2 and so one \u0026hellip;  Block Quotes  Block quotes are\nwritten like so.\nThey can span multiple paragraphs,\nif you like.\n Syntax highlighting will be supported in future versions :)\nNesting You can nest items in a list \u0026hellip;\n  First, get these ingredients:\n carrots celery lentils    Boil some water.\n  Dump everything in the pot and follow\nthis algorithm:\nfind wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done)  Do not bump wooden spoon or it will fall.\n  Horizontal Line You can insert a line with  ---\nLinks Here is a link to the readme file\nAn an external link to the unity documentation\nAn link to the top of this document (section header)\nImages You can also include images!\n","description":"The highly configurable Windows Terminal rocks. It's fast, pretty, and flexible!","id":4,"section":"posts","tags":null,"title":"OnBackingFieldChanged in the Unity Inspector","uri":"http://somethingstrange.com/posts/onbackingfieldchanged-in-the-unity-inspector/"},{"content":"Summary Property change notifications are great, but the Unity Inspector doesn\u0026rsquo;t trigger them when data is changed in the Inspector. Unity serializes fields not properties. The Odin Inspector and Serializer is an essential plugin for Unity that provides many powerful editor enhancements, some of which can be used to alleviate this issue, but it not a magic bullet. In this post, I\u0026rsquo;ll cover how Odin can help solve the issue and then provide some enhancements to leave you with a near perfect remedy.\nHandling data changes It\u0026rsquo;s often important to know what a piece of data has changed so that the change can be handled appropriately.\nFor example, suppose you have an interface element that you\u0026rsquo;d like to update whenever the player\u0026rsquo;s health changes. One way to identify that the health value has changed would be to frequently poll the property in Unity\u0026rsquo;s Update method, compare it against a previous value, and update the screen when something changes.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  public class Player : MonoBehaviour { [SerializeField] private int health; public int Health { get =\u0026gt; this.health; set =\u0026gt; this.health = value; } } public class UserInterfaceComponent : MonoBehaviour { [SerializedField] private Player player; private int previousHealth; protected void Update() { if (previousHealth != player.Health) { previousHealth = player.Health; UpdateScreeng(player.Health); } } private void UpdateScreen(int playerHealth) { // Do something  } }   That works for this simple example, but it isn\u0026rsquo;t the best practice to use Update for things like this, especially in large projects where there may be many things to track and process. The Update method is called every frame when the MonoBehaviour is enabled, and it\u0026rsquo;s important to keep slow and expensive code out of Update.\nEvents to the Rescue Wouldn\u0026rsquo;t it be better if the UserInterfaceComponent was instead notified directly when player.Health was changed so that it just had to handle the event. One way to do this is to implement the INotifyPropertyChanged interface on Player and then UserInterfaceComponent could listen for the event and handle it as needed.\nImplementing INotifyPropertyChanged is easy. You just need to declare the PropertyChanged event and then invoke it whenever a class property changes. In the updated Player class below, note that the Health property setter was changed to only raise the event when the value actually changed. There\u0026rsquo;s usually no need to send out the event when a property is set to its current value.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  public class Player : MonoBehaviour, INotifyPropertyChanged { [SerializeField] private int health; // Declare the event  public event PropertyChangedEventHandler PropertyChanged; public int Health { get =\u0026gt; this.health; set { if (this.health == value) { return; } this.health = value; // Call OnPropertyChanged whenever the property is updated  this.OnPropertyChanged(); } } // Create the OnPropertyChanged method to raise the event  // The calling member\u0026#39;s name will be used as the parameter. [NotifyPropertyChangedInvocator] protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) { this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } } public class UserInterfaceComponent : MonoBehaviour { [SerializedField] private Player player; private int previousHealth; protected void Awake() { // Subscribe to the event.  this.player.PropertyChanged += this.PropertyChangedHandler; } // The PropertyChangedEventHandler will handle the event.  private void PropertyChangedHandler(object sender, PropertyChangedEventArgs e) { switch (e.PropertyName) { case nameof(Player.Health): this.UpdateScreen(this.player.Health); break; } } private void UpdateScreen(int playerHealth) { // Do something  } }   The UserInterfaceComponent class now begins listening for the event in Awake and sits idle, since the Update method was removed entirely. When an event is received, the PropertyChangedHandler method is called and the event data is passed along. In that method, a simple switch is used to check the event\u0026rsquo;s PropertyName, and the screen is updated when it\u0026rsquo;s determined that the event is associated with the player\u0026rsquo;s health.\nOverall, it\u0026rsquo;s a bit more code, but it\u0026rsquo;s much cleaner, it should be easier to maintain as the project grows, and it will probably be far more performant in the long run.\nThis is all standard stuff, and aside from the references to Unity methods and classes, there\u0026rsquo;s nothing special about it. Such INotifyPropertyChanged setups could be used in non-Unity C# projects just as well.\nInspector Updates But wait. This property change notification only occurs when Player.Health property is set, however the Unity Inspector doesn\u0026rsquo;t serialize or deal with C# properties. Unity only serializes public fields and private fields with the SerializeField attribute. This means that when the developer modifies the player\u0026rsquo;s health value in the Inspector, the health field value is changed directly, and the Health property is bypassed entirely.\nAccording to Microsoft\u0026rsquo;s C# Programming Guide, fields should rarely be public.\n Generally, you should use fields only for variables that have private or protected accessibility. Data that your type exposes to client code should be provided through methods, properties, and indexers.\n It\u0026rsquo;s unfortunate that the Unity website features so many simple code samples that feature public fields being used, especially since Unity provides the SerializedField attribute which can be applied to private fields, allowing them to be serialized and shown in the Inspector the same way public¬†fields are. They really should replace all those poor examples. In general, using public fields is a bad practice, and you really shouldn\u0026rsquo;t be using them in your project without an exceptional reason.\n1 2 3 4 5 6 7 8 9  public int item1; // Bad. Don\u0026#39;t do this. [SerializeField] private int item2; // Good.  // A public property with just a public \u0026#34;getter\u0026#34; can be used to allow outside // classes to access its value, but not change it. public int Item2 { get =\u0026gt; item2; private set =\u0026gt; item2 = value; }   This situation is actually pretty frustrating.\nTL;DR mmonly accepted best practice that fields should be private, inaccessible to outside classes, and not be part of an API. When necessary, explicit data accessors should be used for public access to class data.\nIn C#, this encapsulation can be achieved using properties. There are numerous advantages to using properties over fields, such as being able to make data \u0026ldquo;read-only\u0026rdquo; or \u0026ldquo;write-only\u0026rdquo;, being able to validate data when it\u0026rsquo;s set, and sending out event notifications when data is changed, to name a few. That last item is what I\u0026rsquo;ll be covering in this post, but more on that later.\nI really love working with the Unity game engine, but there are certainly a lot of things that can be frustrating when working with it. One of these is that Unity only serializes public fields and private fields with the SerializeField attribute.\n1 2 3 4  public int publicInteger; [SerializeField] private int privateInteger;   The above fields will show up in the Inspector and can be edited there.\nThat behavior is qui\nIt doesn\u0026rsquo;t serialize properties in any way. Furthermore, those serialized fields can be shown in the Unity Inspector and the user can adjust field data using Unity\u0026rsquo;s UI. That\u0026rsquo;s certainly handy, but since the changes are being applied directly to fields, it makes it more difficult to validate data and send out change notifications.\nUnity offers the magic OnValidate method that you can implement to identify when any changes are made in the inspector, but it doesn\u0026rsquo;t tell you what changed, just that something did. So then you\u0026rsquo;ll need to look at all relevant data to identify what happened and determine whether you need to call other logic to handle the change.\npublic int number; private int number; public int Number { get =\u0026gt; number; set =\u0026gt; number = value; } XXX\nYYY\nLinks https://www.microsoft.com/store/productId/9N0DX20HK701\nhttps://github.com/microsoft/terminal\n The Windows Terminal is a modern, fast, efficient, powerful, and productive terminal application for users of command-line tools and shells like Command Prompt, PowerShell, and WSL. Its main features include multiple tabs, panes, Unicode and UTF-8 character support, a GPU accelerated text rendering engine, and custom themes, styles, and configurations.\n üö¶ü§∏‚Äç‚ôÇÔ∏èüöôüöóüöï\nFormatting Paragraphs are separated by a blank line.\nEmphasis is given with italic, bold, and monospace.\nEmphasis is given with *italic*, **bold**, and `monospace`. Lists Itemized lists\n item 1 item 2 and so one \u0026hellip;  Block Quotes  Block quotes are\nwritten like so.\nThey can span multiple paragraphs,\nif you like.\n Syntax highlighting will be supported in future versions :)\nNesting You can nest items in a list \u0026hellip;\n  First, get these ingredients:\n carrots celery lentils    Boil some water.\n  Dump everything in the pot and follow\nthis algorithm:\nfind wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done)  Do not bump wooden spoon or it will fall.\n  Horizontal Line You can insert a line with  ---\nLinks Here is a link to the readme file\nAn an external link to the unity documentation\nAn link to the top of this document (section header)\nImages You can also include images!\n","description":"The highly configurable Windows Terminal rocks. It's fast, pretty, and flexible!","id":5,"section":"posts","tags":null,"title":"OnPropertyChanged in the Unity Inspector","uri":"http://somethingstrange.com/posts/onpropertychanged-in-the-unity-inspector/"},{"content":"According to Microsoft\u0026rsquo;s C# Programming Guide, fields should rarely be public.\n Generally, you should use fields only for variables that have private or protected accessibility. Data that your type exposes to client code should be provided through methods, properties, and indexers.\n It\u0026rsquo;s unfortunate that the Unity website features so many simple code samples that feature public fields being used, especially since Unity provides the SerializedField attribute which can be applied to private fields, allowing them to be serialized and shown in the Inspector the same way public¬†fields are. They really should replace all those poor examples. In general, using public fields is a bad practice, and you really shouldn\u0026rsquo;t be using them in your project without an exceptional reason.\n1 2 3 4 5 6 7 8 9  public int item1; // Bad. Don\u0026#39;t do this. [SerializeField] private int item2; // Good.  // A public property with just a public \u0026#34;getter\u0026#34; can be used to allow outside // classes to access its value, but not change it. public int Item2 { get =\u0026gt; item2; private set =\u0026gt; item2 = value; }   A properly encapsulated class hides its internal data and behaviors from its users, and only exposes properties and methods that need to be shared outside the class.\nUse Properties to expose data to outside classes When a class needs to share its data with an outside class, When necessary, explicit data accessors should be used for public access to class data.\nIn C#, this encapsulation can be achieved using properties. There are numerous advantages to using properties over fields, such as being able to make data \u0026ldquo;read-only\u0026rdquo; or \u0026ldquo;write-only\u0026rdquo;, being able to validate data when it\u0026rsquo;s set, and sending out event notifications when data is changed, to name a few. That last item is what I\u0026rsquo;ll be covering in this post, but more on that later.\nI really love working with the Unity game engine, but there are certainly a lot of things that can be frustrating when working with it. One of these is that Unity only serializes public fields and private fields with the SerializeField attribute.\n1 2 3 4  public int publicInteger; [SerializeField] private int privateInteger;   The above fields will show up in the Inspector and can be edited there.\n","description":"The highly configurable Windows Terminal rocks. It's fast, pretty, and flexible!","id":6,"section":"posts","tags":null,"title":"Public Fields are Bad","uri":"http://somethingstrange.com/posts/unity-public-fields-are-bad/"},{"content":"Links https://www.microsoft.com/store/productId/9N0DX20HK701\nhttps://github.com/microsoft/terminal\n The Windows Terminal is a modern, fast, efficient, powerful, and productive terminal application for users of command-line tools and shells like Command Prompt, PowerShell, and WSL. Its main features include multiple tabs, panes, Unicode and UTF-8 character support, a GPU accelerated text rendering engine, and custom themes, styles, and configurations.\n üö¶ü§∏‚Äç‚ôÇÔ∏èüöôüöóüöï\nFormatting Paragraphs are separated by a blank line.\nEmphasis is given with italic, bold, and monospace.\nEmphasis is given with *italic*, **bold**, and `monospace`. Lists Itemized lists\n item 1 item 2 and so one \u0026hellip;  Block Quotes  Block quotes are\nwritten like so.\nThey can span multiple paragraphs,\nif you like.\n Syntax highlighting will be supported in future versions :)\nNesting You can nest items in a list \u0026hellip;\n  First, get these ingredients:\n carrots celery lentils    Boil some water.\n  Dump everything in the pot and follow\nthis algorithm:\nfind wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done)  Do not bump wooden spoon or it will fall.\n  Horizontal Line You can insert a line with  ---\nLinks Here is a link to the readme file\nAn an external link to the unity documentation\nAn link to the top of this document (section header)\nImages You can also include images!\n","description":"The highly configurable Windows Terminal rocks. It's fast, pretty, and flexible!","id":7,"section":"posts","tags":null,"title":"Windows Terminal","uri":"http://somethingstrange.com/posts/windows-terminal/"},{"content":"I grew up in the 80s, during the golden age of arcade video games and the early days of home computing, and it\u0026rsquo;s hard to overstate the influence video games and 8-bit computers had on me.\nA great many hours were spent sitting in the living room with my family where we huddled around the only television in the house to play games like Pitfall, Keystone Kapers and Yar\u0026rsquo;s Revenge on our Atari 2600. I particularly enjoyed River Raid with its seemingly endless gameplay provided by procedural terrain generation.\nI recieved a Commodore 64 for Christmas in 1982, and it changed everything for me. Compared to the Atari, it had superior graphics and sound, an integrated keyboard, and an amazing 64K of RAM. 64K! More importantly, within minutes of plugging the computer in, I was writing my first program in CBM BASIC. From that point on, I was hooked. Not only did I want to play video games, but I wanted to make my own.\nA little more than a decade later, I found myself smack-dab in the middle of the video game industry when I joined Looking Glass Studios as a junior game designer. Since then, I\u0026rsquo;ve worked at several game studios, filled many development roles, released a bunch of games on various platforms, and learned a ton along the way. Some of the game I\u0026rsquo;ve worked on include Thief: The Dark Project, System Shock 2, Eye of Rana, Dark Messiah of Might and Magic, The Bourne Conspiracy, Skylanders: Lost Islands, and Luna and the Moonling.\n     --  When I\u0026rsquo;m not hunched over my workstation in a dimly lit room, I enjoy collecting retro consoles, computers, and games from the late 1970s, 80s, and early 90s.\nMy name is Michael Ryan, and I\u0026rsquo;m a professional game developer and retro computing fanatic.\nLong Live the Commodore 64!\n","description":"Zzo about page","id":8,"section":"","tags":null,"title":"About","uri":"http://somethingstrange.com/about/"}]