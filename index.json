[{"content":"Font Awesome is an icon font. It\u0026rsquo;s used all over the place. I use it when developing editor tools for my Unity projects. I love it. It\u0026rsquo;s awesome.\nI just started working on this site and I chose to build it with Hugo, which is a very popular open-source static site generator. So far, I like it a lot, but I was keenly interested in adding support for Font Awesome.\nThe Font Awesome docs provide numerous ways to get started, from kits to self-hosted setups, and using web fonts or SVG images with javascript. There are many, many articles that detail the advantages of SVG icons over font icons, so I\u0026rsquo;m only interested in utilizing SVGs.\nThe traditional setup involves loading in a JavaScript files on every page that will includes icons, and then using placeholder tags wherever you want icons to appear. JavaScript will replace those tags with SVGs once everything finishes loading.\nA 2018 article by Nick Glabreath mentions some potential downsides to the traditional setup, such as extra network dependencies and potential processing delays. It also provides some great information on embedding SVGs directly in the page when the site is built, which avoids the extra network calls and delays at the expense of a slightly larger page load.\nA more recent article by Micah R Ledbetter took what Galbreath presented and made a few enhancements, which I will build upon further.\nQuick and Easy Download Font Awesome I have an active subscription to Font Awesome Pro, so I just downloaded the v5.15.4 release from their website, but you can download the latest release or the free icon set from the GitHub repository. The version I\u0026rsquo;m using contains 7,864 pro icons and 1,608 free icons.\nCopy the SVGs Some of the other articles have you place the SVG (scalable vector graphics) files inside your theme folder, however Hugo is designed for customization with a layer-like site generation workflow. This allows you to modify your site and override your theme without actually changing the theme code or folder structure. Here\u0026rsquo;s a short post illustrating how Hugo Theme Layering works. Ideally nothing should be changed inside the theme folder, and that includes adding your Font Awesome SVGs. So they\u0026rsquo;ll be added to the root instead.\nThe SVGs were extracted from the archive and placed in the assets folder, since they\u0026rsquo;re used like other assets and only accessed when the site is built. The hierarchy looks like this:\n \u0026lt;root\u0026gt;\nassets\nsvg\nbrands\nduotone\nlight\nregular\nsolid\n If you\u0026rsquo;re using the free version of Font Awesome, you may only have a few of those folders, such as solid and brands.\nAdd the partials Processing the SVG Create a partial file: \u0026lt;root\u0026gt;/layouts/partials/fontawesome.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  {{- $settings := partial \u0026#34;func/getFontAwesomeSettings.html\u0026#34; (dict \u0026#34;style\u0026#34; .style \u0026#34;arg1\u0026#34; .arg1 \u0026#34;arg2\u0026#34; .arg2) -}} \u0026lt;span style=\u0026#34;line-height:1em; vertical-align:middle;\u0026#34;\u0026gt; {{- $fname:=print \u0026#34;/assets/svg/\u0026#34; .style \u0026#34;/\u0026#34; .icon \u0026#34;.svg\u0026#34; -}} {{- if (fileExists $fname) -}} {{- $svg := readFile $fname -}} {{- $svg = replace $svg \u0026#34; 512\\\u0026#34;\u0026gt;\u0026lt;!--\u0026#34; (print \u0026#34; 512\\\u0026#34; style=\\\u0026#34;height:\u0026#34; $settings.size \u0026#34;; width:\u0026#34; $settings.size \u0026#34;\\\u0026#34;\u0026gt;\u0026lt;!--\u0026#34;) -}} {{- $svg = replaceRE \u0026#34;\u0026lt;!--[^\u0026gt;]*--\u0026gt;\u0026#34; \u0026#34;\u0026#34; $svg -}} {{- if eq .style \u0026#34;duotone\u0026#34; -}} {{- $svg = replace $svg \u0026#34;class=\\\u0026#34;fa-primary\\\u0026#34;/\u0026gt;\u0026#34; (print \u0026#34;class=\\\u0026#34;fa-primary\\\u0026#34; style=\\\u0026#34;fill:\u0026#34; $settings.primaryColor \u0026#34;; opacity:\u0026#34; $settings.primaryOpacity \u0026#34;\\\u0026#34;/\u0026gt;\u0026#34;) -}} {{- $svg = replace $svg \u0026#34;class=\\\u0026#34;fa-secondary\\\u0026#34;/\u0026gt;\u0026#34; (print \u0026#34;class=\\\u0026#34;fa-secondary\\\u0026#34; style=\\\u0026#34;fill:\u0026#34; $settings.secondaryColor \u0026#34;; opacity:\u0026#34; $settings.secondaryOpacity \u0026#34;\\\u0026#34;/\u0026gt;\u0026#34;) -}} {{- $svg = replace $svg \u0026#34;\u0026lt;defs\u0026gt;\u0026lt;style\u0026gt;.fa-secondary{opacity:.4}\u0026lt;/style\u0026gt;\u0026lt;/defs\u0026gt;\u0026#34; \u0026#34;\u0026#34; -}} {{- else -}} {{- $svg = replace $svg \u0026#34;\u0026lt;path\u0026#34; (print \u0026#34;\u0026lt;path fill=\\\u0026#34;\u0026#34; $settings.primaryColor \u0026#34;\\\u0026#34; opacity=\\\u0026#34;\u0026#34; $settings.primaryOpacity \u0026#34;\\\u0026#34;\u0026#34;) -}} {{- end -}} {{- $svg | safeHTML -}} {{- else -}} \u0026lt;span class=\u0026#34;sc-fontawesome-missing\u0026#34; title=\u0026#34;Could not find \u0026amp;quot;{{.icon}}\u0026amp;quot; icon with \u0026amp;quot;{{.style}}\u0026amp;quot; style\u0026#34;\u0026gt;\u0026amp;#xFFFD;\u0026lt;/span\u0026gt; {{- warnf \u0026#34;Could not find \\\u0026#34;%s\\\u0026#34; icon with \\\u0026#34;%s\\\u0026#34; style.\u0026#34; .icon .style -}} {{- end -}} \u0026lt;/span\u0026gt;{{- \u0026#34;\u0026#34; -}}   Note that this partial differs from Ledbetter\u0026rsquo;s in a few ways.\n This partial was placed outside the theme, so the theme folder path is no longer needed in the $fname variable. The icon style and name are passed to the partial separately and accessed using .style and .icon, respectively. Optional size and color (with opacity) settings may now be passed through the shortcodes, and the input is validated with a call to the getFontAwesomeSettings partial, which returns values that are accessed with $settings. The size is applied directly to \u0026lt;svg\u0026gt; using inline styles, which seems to improve layout and sizing with adjacent text. There\u0026rsquo;s now special handling of duotone icons, which have primary and secondary colors and opacities, and those need to be applied to the appropriate \u0026lt;path\u0026gt; in the SVG. The \u0026lt;defs\u0026gt;\u0026lt;style\u0026gt; combo is also removed, as its no longer needed. There\u0026rsquo;s a check to see if the file exists before rendering it. If it doesn\u0026rsquo;t exist, a build warning will be logged and the replacement glyph (ï¿½) will be embedded into the page instead. The span wrapping the replacement character also has a tooltip that includes the icon and style names being used, which may be useful for debugging the missing icon. Most importantly, this check allows Hugo to successfully rebuild the page, otherwise the build will fail when readFile fails to load the missing SVG file.  Parsing Settings Create a partial file: \u0026lt;root\u0026gt;/layouts/partials/func/getFontAwesomeSettings.html\nNote that I placed this in the func sub-directory, because this partial will return a value, and I like to keep partials that return values separate from those that don\u0026rsquo;t.\nA partial that returns a value may only return a value and cannot affect rendering output, so there\u0026rsquo;s no need to worry about whitespace sneaking into the generated HTML when the site is built. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  {{ $lengthPattern := \u0026#34;^[\\\\d\\\\.]+(?i)(?:cm|in|mm|pc|pt|px|q|%|ch|em|ex|lh|rem|vh|vmax|vmin|vw)(?-i)$\u0026#34; }} {{ $data := newScratch }} {{ $data.Set \u0026#34;size\u0026#34; \u0026#34;1em\u0026#34; }} {{ $data.Set \u0026#34;primaryColor\u0026#34; \u0026#34;currentColor\u0026#34; }} {{ $data.Set \u0026#34;primaryOpacity\u0026#34; \u0026#34;1.0\u0026#34; }} {{ $data.Set \u0026#34;secondaryColor\u0026#34; \u0026#34;currentColor\u0026#34; }} {{ $data.Set \u0026#34;secondaryOpacity\u0026#34; \u0026#34;0.4\u0026#34; }} {{ $args := slice .arg1 .arg2 }} {{ range $args }} {{ $length := findRE $lengthPattern . }} {{ with $length }} {{ $data.Set \u0026#34;size\u0026#34; (delimit $length \u0026#34;\u0026#34;) }} {{ else }} {{ with . }} {{ $parts := split . \u0026#34;;\u0026#34; }} {{ with (index $parts 0) }} {{ $data.Set \u0026#34;primaryColor\u0026#34; ((partial \u0026#34;func/getFontAwesomeColorOpacity.html\u0026#34; (slice . 0)) | default \u0026#34;currentColor\u0026#34;) -}}) }} {{ $data.Set \u0026#34;primaryOpacity\u0026#34; ((partial \u0026#34;func/getFontAwesomeColorOpacity.html\u0026#34; (slice . 1)) | default \u0026#34;1.0\u0026#34;) -}}) }} {{ end }} {{ with (index $parts 1) }} {{ $data.Set \u0026#34;secondaryColor\u0026#34; ((partial \u0026#34;func/getFontAwesomeColorOpacity.html\u0026#34; (slice . 0)) | default \u0026#34;currentColor\u0026#34;) -}}) }} {{ $data.Set \u0026#34;secondaryOpacity\u0026#34; ((partial \u0026#34;func/getFontAwesomeColorOpacity.html\u0026#34; (slice . 1)) | default \u0026#34;0.4\u0026#34;) -}}) }} {{ end }} {{ end }} {{ end }} {{ end }} {{- return (dict \u0026#34;size\u0026#34; ($data.Get \u0026#34;size\u0026#34;) \u0026#34;primaryColor\u0026#34; ($data.Get \u0026#34;primaryColor\u0026#34;) \u0026#34;primaryOpacity\u0026#34; ($data.Get \u0026#34;primaryOpacity\u0026#34;) \u0026#34;secondaryColor\u0026#34; ($data.Get \u0026#34;secondaryColor\u0026#34;) \u0026#34;secondaryOpacity\u0026#34; ($data.Get \u0026#34;secondaryOpacity\u0026#34;) ) -}}   This may look a bit complicated, but that\u0026rsquo;s because either or both of the size and color/opacity settings can be provided and in any order, which simplifies the shortcode usage and makes it more flexible. Also, the color data is a compound string containing up to two color and two opacity values, which are parsed and separated before the values are returned.\nI\u0026rsquo;ll run through it quickly.\n A regex pattern is used to identify the size argument, and all length types defined in the CSS specification are included. I only tested with em, rem, and px, but they should all work as expected. A scratch is used to store potential results as the partial arguments are being processed. Default values are established and will be used unless the setting is overridden by an argument. Both arguments are examined, and if the size is identified, it\u0026rsquo;s used, otherwise color parsing is performed. Parsing calls the getFontAwesomeColorOpacity partial, which takes a slice and returns a string, and if parsing fails a default value will be applied. The results are returned in a dict using named parameters.  Parsing Color and Opacity Create a partial file: \u0026lt;root\u0026gt;/layouts/partials/func/getFontAwesomeColorOpacity.html\n1 2 3 4 5 6 7  {{ $result := 0 }} {{ $parts := split (index . 0) \u0026#34;/\u0026#34; }} {{ with (index $parts (index . 1)) }} {{ $result = trim . \u0026#34; \\t\\n\u0026#34; }} {{ end }} {{- return $result -}}   This partial is really simple. It takes a slice containing a string and an index. The string may contain both color and opacity data, so it\u0026rsquo;s split into color and opacity. The index just tells the function which setting is requested, and if it exists, it\u0026rsquo;ll be returned, otherwise the function will return 0 as an failure condition.\nThat\u0026rsquo;s it! On to the shortcodes!\nAdd the shortcodes For each shortcode you want to use, create a file at: \u0026lt;root\u0026gt;/layouts/shortcodes/. I created a shortcode for each of the Font Awesome styles (brands, duotone, light, regular, solid). If you\u0026rsquo;re using the free version, you probably won\u0026rsquo;t need them all.\n \u0026lt;root\u0026gt;\nlayouts\nshortcodes\nfab.html\nfad.html\nfal.html\nfar.html\nfas.html\n Here\u0026rsquo;s what fas.html is looks like:\n1  {{ partial \u0026#34;fontawesome.html\u0026#34; (dict \u0026#34;style\u0026#34; \u0026#34;solid\u0026#34; \u0026#34;icon\u0026#34; ( .Get 0 ) \u0026#34;arg1\u0026#34; ( .Get 1 ) \u0026#34;arg2\u0026#34; ( .Get 2 )) }}   The only thing that differs in fab.html is that the style parameter was changed to brands:\n1  {{ partial \u0026#34;fontawesome.html\u0026#34; (dict \u0026#34;style\u0026#34; \u0026#34;brands\u0026#34; \u0026#34;icon\u0026#34; ( .Get 0 ) \u0026#34;arg1\u0026#34; ( .Get 1 ) \u0026#34;arg2\u0026#34; ( .Get 2 )) }}   Be sure to use duotone, light, and regular in the other files, if you create them.\nShortcode Usage  .shortcode-showcase { background-color:rgba(255,255,255,0.05); border:solid 1px rgba(0,0,0,0.5); border-radius:0.5rem; box-shadow:0 4px 8px rgba(0,0,0,0.5); margin-bottom:1rem; min-height: calc(4rem + 2px); padding:0.5rem; } .shortcode-showcase  div:nth-of-type(1) { height:3rem; line-height:3rem; position:absolute; text-align:center; width:3rem; } .shortcode-showcase  div:nth-of-type(2) { padding-left:3.5rem; } .shortcode-color-rules { display:flex; margin: 0 0 1rem 2rem; vertical-align:top; flex-wrap: wrap; } .shortcode-color-rules  div { display:inline-block; margin:0 1rem 1rem 0; vertical-align:top; white-space:nowrap; } .shortcode-color-rules  div p { margin:0; }  Syntax {{\u0026lt; \u0026lt;style-shortcode\u0026gt; \u0026lt;icon\u0026gt; [color] [size] \u0026gt;}}\nParameters    Notation Description     \u0026lt;style-shortcode\u0026gt; One of the Font Awesome shortcodes created earlier: fab, fad, fal, far, or fas.   \u0026lt;icon\u0026gt; A Font Awesome icon code such as rocket-launch.   [color] A color pattern, which may include a single color value using standard CSS color notation: [color]ââ¢ orangeââ¢ #ffa500ââ¢ rgb(255, 165, 0)ââ¢ hsl(39, 100%, 50%)\nA color and an opacity: [color][/\u0026lt;opacity\u0026gt;]ââ¢ orange / 50%ââ¢ #ffa500 / 0.5\nTwo colors with optional opacity: [color][/\u0026lt;opacity\u0026gt;][;[color][/\u0026lt;opacity\u0026gt;]ââ¢ orange / 50% ; blue / 100%ââ¢ #ffa500 / 0.5 ; #00f / 1\nTo set opacity without affecting color, leave the color value blank or set it to currentColor:ââ¢  / 50%ââ¢ currentColor / 0.5\nTo set secondary color without affecting the primary, leave the primary color value blank or set it to currentColor:ââ¢  ; blueââ¢ currentColor ; #00f\n If the value includes any non-alphanumeric characters, wrap it in quotes.   [size] The size value using standard CSS length notation.\n If the value includes any non-alphanumeric characters, wrap it in quotes.    Examples To use in markdown content, just use one of the new shortcodes followed by the icon name.\nfab brands\nfad duotone\nfal light\nfar regular\nfas solid\nYou may specify a color after the icon name using standard CSS color notation, such as a hex, rgb, or hsl value or a color keyword.\n   {{\u0026lt; fas jack-o-lantern DarkOrange \u0026gt;}} {{\u0026lt; fas jack-o-lantern \u0026#34;#ff8c00\u0026#34; \u0026gt;}} {{\u0026lt; fas jack-o-lantern \u0026#34;rgb(255, 140, 0)\u0026#34; \u0026gt;}} {{\u0026lt; fas jack-o-lantern \u0026#34;hsl(33, 100%, 50%)\u0026#34; \u0026gt;}}   The color opacity may be changed by appending a / and a numeric or percentage value. Whitespace surrounding the / is ignored.\nDo not specify opacity directly in the color value, like you can when using a 4-byte hex value or rgba or hsla with alpha channels. Append it instead.\n #6699FF80 (4 bytes)\n rgba(102 153 255 / 50%)\n hsla(220 100% 70% / 50%)\n  #6699FF / 50%\n rgb(102 153 255) / 50%\n hsl(220 100% 70%) / 50%\n      {{\u0026lt; fas jack-o-lantern \u0026#34;DarkOrange/0.5\u0026#34; \u0026gt;}} {{\u0026lt; fas jack-o-lantern \u0026#34;DarkOrange/50%\u0026#34; \u0026gt;}} {{\u0026lt; fas jack-o-lantern \u0026#34;DarkOrange / 50%\u0026#34; \u0026gt;}} {{\u0026lt; fas jack-o-lantern \u0026#34;rgb(255, 140, 0) / 50%\u0026#34; \u0026gt;}}    The size may also be specified using standard CSS length notation.\n    {{\u0026lt; fas jack-o-lantern 3rem \u0026gt;}}    The order of the optional color and size parameters doesn\u0026rsquo;t matter, as long as they follow the icon parameter.\n    {{\u0026lt; fas jack-o-lantern DarkOrange 3rem \u0026gt;}} {{\u0026lt; fas jack-o-lantern 3rem DarkOrange \u0026gt;}}    Duotone icons have a slightly different color syntax, because they have both a primary and secondary color. Just separate the colors with a ;. Whitespace surrounding the ; is ignored.\nBy default the secondary color has an opacity of 40%, so you may want to override that as well.\n    {{\u0026lt; fad jack-o-lantern \u0026#34;yellow;DarkOrange/1\u0026#34; 3rem \u0026gt;}} {{\u0026lt; fad jack-o-lantern \u0026#34;yellow ; DarkOrange / 100%\u0026#34; 3rem \u0026gt;}}    Have fun with icons!           ","description":"A few basic steps to integrate Font Awesome with a Hugo site.","id":0,"section":"posts","tags":["Font Awesome","hugo"],"title":"Hugo with Font Awesome","uri":"http://somethingstrange.com/posts/hugo-with-fontawesome/"},{"content":"The following table describes the notation used to indicate command-line syntax.\n   Notation Description     Loose Text Required text that must be typed as shown.   \u0026lt; â¦ \u0026gt; Placeholder for a required value.   [ â¦ ] Set of optional items.   { â¦ } Set of required items. You must choose one.   | (pipe) Pipe separator for mutually exclusive items.   ... (ellipsis) Items that can be repeated and used multiple times.    ","description":"A few basic steps to integrate Font Awesome with a Hugo site.","id":1,"section":"posts","tags":["terminal"],"title":"Command-Line Syntax Key","uri":"http://somethingstrange.com/posts/command-line-syntax-key/"},{"content":"Setting up a private Verdaccio registry is generally quite easy, and there are plenty of tutorials and videos covering its setup. Unfortunately, most of those resources focus on setting up Verdaccio on a local system, and when docker is involved the tutorials usually assume docker is being run from the command line.\nRunning docker containers on a Synology NAS is a completely different process, and I wasn\u0026rsquo;t able to find even a single resource that covered the procedure. This post will hopefully clear some things up.\nDocker  First things first, you\u0026rsquo;ll need to install the Docker package if it\u0026rsquo;s not already installed.\nDocker is a lightweight virtualization application that gives you the ability to run thousands of containers created by developers from all over the world on DSM. The hugely popular built-in image repository, Docker Hub, allows you to find shared applications from other talented developers.\nâ Synology DSM Feature: Docker   Open Synology Package Center.\n  Search for docker, select it, and click Install.\n   Folder Setup  When working with Docker containers, I try to handle them like read-only objects whenever possible. If the container needs to work with persistent data, that data should be stored outside the container.\nIt\u0026rsquo;s common for containers to provide \u0026ldquo;mount paths\u0026rdquo; that can be used to map file system folders to the container. The container will then store data in those mapped folders. Later, if you decide to update or replace the container, the persistent data will remain in these folders.\nDon\u0026rsquo;t store data in containers - A container can be stopped, destroyed, or replaced. An application version 1.0 running in container should be easily replaced by the version 1.1 without any impact or loss of data. For that reason, if you need to store data, do it in a volume. In this case, you should also take care if two containers write data on the same volume as it could cause corruption. Make sure your applications are designed to write to a shared data store.\nâ 10 things to avoid in docker containers, #1 Tip The Verdaccio container exposes three mount paths (conf, plugins, and storage), and we\u0026rsquo;re going to set those folders up first, so that they\u0026rsquo;re ready to use when Verdaccio is configured later.\n Create a Shared Folder called docker. It\u0026rsquo;s assumed you\u0026rsquo;ve already created shared folders on your NAS and know how it\u0026rsquo;s done.\nConsider using the following configuration options:\n Disable: Advanced Permissions, Recycle Bin, and File Compression. Enable: Data Integrity Protection.    Using File Station, create the following folder hierarchy, which will be used by the container:\n docker  verdaccio  conf  plugins  storage    Download Verdaccio  Download the latest 5.x container, which as of 2022-03-01 is 5.6.2.\nVersion 6 (Development branch)\nâ GitHub / Verdaccio  Open Docker and go to the Registry tab.\n  Search for verdaccio/verdaccio, select it, and click Download.\n  Select 5 from the Please Choose a Tag dropdown and click Select.\n   Install Verdaccio   In Docker, go to the Image tab.\n  Launch verdaccio/verdaccio:5 image with the following settings:\n Change the Container Name name, as desired. The default name is verdaccio-verdaccio. Check Enable resource limitation, if you want to control how much memory the container will use. My NAS has 8 GB of RAM, so I set the Memory Limit to 2048 MB.\n    Click Advanced Settings and go to the Advanced Settings tab, if it\u0026rsquo;s not already selected.\n Check Enable auto-restart so that the container will restart after an improper shutdown.\n    Go to the Volume tab.\n For each of the three folders created earlier, click Add Folder, select the folder, and enter the Mount Path.\n    Go to the Port Settings tab.\n Change the Local Port to match the Container Port value, which in this case is 4873.\n    Click Apply, then Next, and finally Apply.\n   Run Verdaccio  The container should automatically start after applying settings. You can Start, Stop, and Restart it from the Container tab in Docker.\nVerdaccio has a web user interface to display packages in the registry.\nThe web interface can be accessed at http://\u0026lt;nas_ip_address\u0026gt;:4873/.\nVerdaccio has a web user interface to display only the private packages and can be customised to your liking.\nâ Verdaccio, Web User Interface  Terminal Commands  \nThe npm executable provides command line access to the registry, and it allows you to add users, login, logout, set the target registry, publish packages, and more.\nMany commands accept an option to target the registry, such as:\nnpm adduser --registry http://\u0026lt;nas_ip_address\u0026gt;:4873/\nYou can also set the registry so that it\u0026rsquo;s automatically used when executing future commands.\n// Sets the registry (storing it in \u0026lt;home_folder\u0026gt;/.npmrc) npm set registry=http://\u0026lt;nas_ip_address\u0026gt;:4873/ // You can now add a user to the registry with out specifying it. npm adduser // Get the current registry npm get registry \u0026gt; http://\u0026lt;nas_ip_address\u0026gt;:4873/ Some Useful Commands  ping Ping npm registry login Create or verify a user account. publish Publish a package whoami Display the username that\u0026rsquo;s currently logged in. help Get help on npm. This will open a webpage with details on the selected command.   Authentication  The basic Verdaccio setup uses htpasswd for authentication.\nThe authentication is tied to the auth plugin you are using. The package restrictions are also handled by the Package Access.\nâ Verdaccio, Authentication Based on config.yaml the file should probably be called htpasswd and not the more common .htpasswd.\nYou can use a Linux command line program create an htpasswd file, otherwise try this:\n  Generate a username:password-hash string using an online htpasswd generator. Only the \u0026ldquo;Apache specific salted MD5 (insecure by common)\u0026rdquo; mode worked for me. Your mileage may vary. It should look similar to this:\nusername:$apr1$wzmb709f$fqeK6wasto.rEa6RhtaMj0\n  Create a htpasswd file inside the verdaccio/storage/ folder.\n  In that file paste the generated htpasswd string, then save the file.\n  You should now be able to log in to your registry from the command line using npm login.\n  Authentication Plugins There are more than a dozen other authentication plugins offered by the Verdaccio community, and some of them look pretty cool.\nIn the near future, I intend to try the Verdaccio GitHub OAuth plugin, which offers GitHub OAuth integration for both the browser and the command line. Login can be limited to members of a certain GitHub organizations, and package access can be limited to GitHub organizations, teams, repos, and users. If I switch over to it, I\u0026rsquo;ll update this post with details.\n Publishing Errors  If, when publishing a package in the registry, you receive an error, such as \u0026ldquo;404 Not Found\u0026rdquo; or \u0026ldquo;no such package available\u0026rdquo;, the problem could be related to folder ownership.\nBy default, the conf, plugins, and storage folders are owned by the NAS user that created them, however from what I\u0026rsquo;ve read in some bug reports (#483, #1085), the storage folder and possibly all three should have the owner set to verdaccio or, more importantly, to the UID of 10001.\nI received these errors myself, and changing the owner seemed to solve the problem.\nNow changing the owner of a folder or file to another registered user in Synology DSM is pretty straight forward, but changing it to an unknown user or specific UID is not. For that, I believe you need to SSH into the NAS and change it manually from the command line. That\u0026rsquo;s what I did.\nSSH If you\u0026rsquo;re like me, you probably don\u0026rsquo;t have SSH enabled under normal circumstances, so you\u0026rsquo;ll have to temporarily enable it until the folder ownership has changed.\nTo log into the DSM via SSH:\n  Enable SSH via DSM Control Panel \u0026gt; Terminal \u0026amp; SNMP \u0026gt; Enable SSH service.\n  From the Windows Terminal command line:\nssh \u0026lt;admin_account\u0026gt;@\u0026lt;ip_address\u0026gt;\nSo, if the admin user is \u0026ldquo;bob\u0026rdquo; and the NAS IP address is \u0026ldquo;192.168.1.150\u0026rdquo;, you\u0026rsquo;d use:\nssh bob@192.168.1.150\nPrior to DSM 6, you could SSH into the NAS using root along with the admin account password, but that\u0026rsquo;s no longer possible. Instead, you can use any account that\u0026rsquo;s in the admin group, and then use sudo to make super user changes.   Enter the account\u0026rsquo;s password when prompted.\n  You\u0026rsquo;ll likely start in the user\u0026rsquo;s home folder, so change to the verdaccio folder created earlier with something like:\ncd /volume1/docker/verdaccio/\n  You can view the folder owners using ls -l. The third column will list the folder owner.\n  Change the owner of each folder using sudo and chown.\nsudo chown 10001 storage/ sudo chown 10001 plugins/ sudo chown 10001 conf/   Verify that folder ownership has changed then then logout with exit.\n  Disable SSH again via DSM Control Panel \u0026gt; Terminal \u0026amp; SNMP \u0026gt; Enable SSH service.\n   Unity Scoped Registry Setup  \nThe Unity manual covers Scoped Registries and Scoped Registry Authentication, and many other sites provide similar information on how to configure a Unity project to connect to a scoped registry.\nI\u0026rsquo;ll elaborate on the process later, if necessary.\n ","description":"","id":2,"section":"posts","tags":["Synology","Verdaccio","Docker","Unity","npm"],"title":"Verdaccio, Synology, and Unity. Oh My!","uri":"http://somethingstrange.com/posts/verdaccio-synology-and-unity/"},{"content":"Whitespace U+0009 TAB  \u0026ensp;Copy    U+000D NEWLINE  \u0026ensp;Copy    U+200B ZERO WIDTH SPACE \u0026amp;ZeroWidthSpace; \u0026ensp;Copy  0 em  U+2006 SIX-PER-EM SPACE  \u0026ensp;Copy  1/6 em  U+2005 FOUR-PER-EM SPACE (mid space)  \u0026ensp;Copy  1/4 em  U+2004 THREE-PER-EM SPACE (thick space) \u0026amp;emsp13; \u0026ensp;Copy  1/3 em  U+2002 EN SPACE (nut) \u0026amp;ensp; \u0026ensp;Copy  1/2 em (or 1 en)  U+2003 EM SPACE (mutton) \u0026amp;emsp; \u0026ensp;Copy  1 em  U+200A HAIR SPACE \u0026amp;hairsp; \u0026ensp;Copy  Depends on font, narrower than THIN SPACE  U+2009 THIN SPACE \u0026amp;thinsp; \u0026ensp;Copy  Depends on font, typically 1/5 em (or sometimes 1/6 em)  U+0020 SPACE  \u0026ensp;Copy  Depends on font, typically 1/4 em, often adjusted  U+2008 PUNCTUATION SPACE \u0026amp;puncsp; \u0026ensp;Copy  Depends on font, the width of a period â.â  U+2007 FIGURE SPACE \u0026amp;numsp; \u0026ensp;Copy  (Tabular width), Depends on font, the width of digits  Non-Breaking Whitespace U+FEFF ZERO WIDTH NO-BREAK SPACE  \u0026ensp;Copy  0 em  U+202F NARROW NO-BREAK SPACE  \u0026ensp;Copy  Depends on font, typically 1/5 or 1/6 em  U+00A0 NO-BREAK SPACE \u0026amp;nbsp; \u0026ensp;Copy  Depends on font, typically 1/4 em, but often not adjusted  Dashes and Hyphens U+002D HYPHEN-MINUS  \u0026ensp;Copy  ASCII hyphen, with multiple usage, or âambiguous semantic valueâ; the width should be âaverageâ  U+2010 HYPHEN  \u0026ensp;Copy  Unambiguous a hyphen character, as in âtop-to-bottomâ; narrow width  U+2011 NO-BREAK HYPHEN  \u0026ensp;Copy  As HYPHEN, but not an allowed line break point  U+2012 FIGURE DASH  \u0026ensp;Copy  As HYPHEN-MINUS, but has the same width as digits  U+2013 EN DASH \u0026amp;ndash; \u0026ensp;Copy  1/2 em (or 1 en)  U+2014 EM DASH \u0026amp;mdash; \u0026ensp;Copy  1 em  Mathematical Operators and Other Symbols U+2212 MINUS SIGN \u0026amp;minus; \u0026ensp;Copy  An arithmetic operator  U+00B1 PLUS-MINUS SIGN \u0026amp;plusmn; \u0026ensp;Copy  A mathematical symbol  U+00F7 DIVISION SIGN \u0026amp;divide; \u0026ensp;Copy  A mathematical symbol  U+00D7 MULTIPLICATION SIGN \u0026amp;times; \u0026ensp;Copy  A mathematical symbol  U+00B0 DEGREE SIGN \u0026amp;deg; \u0026ensp;Copy  A mathematical symbol  U+00A9 COPYRIGHT SIGN \u0026amp;copy; \u0026ensp;Copy  A mathematical symbol  U+00AE REGISTERED SIGN \u0026amp;reg; \u0026ensp;Copy  A mathematical symbol  U+2122 TRADE MARK SIGN \u0026amp;trade; \u0026ensp;Copy  A mathematical symbol  ","description":"","id":3,"section":"posts","tags":["unicode"],"title":"Useful Unicode Characters","uri":"http://somethingstrange.com/posts/useful-unicode-characters/"},{"content":"The ScriptingListener plug-in The ScriptingListener plug-in can record JavaScript to a log file for any operation which is actionable.\nInstall the ScriptingListener plug-in:\n  Quit Photoshop.\n  Download the ScriptingListener plug-in package. This package contains the ScriptingListener plug-in in the \u0026ldquo;Utilities\u0026rdquo; folder, scripting documentation, and sample scripts.\n  Windows:\n Scripting Listener Plug-in for Windows  macOS:\n Scripting Listener Plug-in for macOS (Photoshop 2020 and later)\n Scripting Listener Plug-in for macOS (Photoshop 2019 and earlier)    After you download the ScriptingListener plug-in package file above, double-click it to decompress it. If asked, extract all the files.\n  After you unzip the package, you will see three folders:\n Documents Sample Scripts Scripting Utilities  Copy the Utilities folders to the Photoshop plug-ins folder:\n   Windows:\nProgram Files\\Adobe\\Adobe Photoshop [version]\\Plug-ins\\\n   macOS:\nApplications\\Adobe Photoshop [version]\\Plug-ins\\\n    Relaunch Photoshop.\n  After installing the ScriptingListener plug-in, steps you perform are recorded as JavaScript to the ScriptingListenerJS.log on the Desktop.\nFor information on the Photoshop Scripting SDK and using the ScriptingListener Plug-in, see the Photoshop Developer Center.\n","description":"Markdown Cheat Sheet. YEAH!","id":4,"section":"posts","tags":["Photoshop","js"],"title":"Photoshop Scripting","uri":"http://somethingstrange.com/posts/photoshop-scripting/"},{"content":"Indenting markdown usually isn\u0026rsquo;t difficult, however there could be a few gotchas. Skip down to the end for a quick little Hugo shortcode for inserting indents in markdown.\nThe Problem Earlier today, I wanted to indent a markdown page element that included a link, but for some reason, the HTML that wrapped the markdown link was breaking the things.\nSearch the web for how to \u0026ldquo;indent without adding a bullet or number in markdown\u0026rdquo; and you\u0026rsquo;ll likely come across multiple suggestions that rely on a mix of HTML tags and CSS styles.\nMost suggestions either involve wrapping the target line with a div styled with a margin to create the indent or a ul and li pair styled to hide the bullet. These suggestions usually work when indenting plain text, but for some reason, they were breaking the link.\nFor example:\n1  \u0026lt;div style=\u0026#34;margin-left: 2em;\u0026#34;\u0026gt;A: [Link](http://example.com)\u0026lt;/div\u0026gt;   and\n1  \u0026lt;ul\u0026gt;\u0026lt;li style=\u0026#34;list-style-type: none;\u0026#34;\u0026gt;B: [Link](http://example.com)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;   Both of the above examples produced a malformed link when the site was built. As shown here, the markdown link was interpreted as plain text.\nA: [Link](http://example.com) B: [Link](http://example.com) \nThe issue can be avoided by inserting a blank line between the opening tags and the link markdown, but it\u0026rsquo;s not pretty.\n1 2 3  \u0026lt;div style=\u0026#34;margin-left: 2em;\u0026#34;\u0026gt; A: [Link](http://example.com)\u0026lt;/div\u0026gt;   and\n1 2 3  \u0026lt;ul\u0026gt;\u0026lt;li style=\u0026#34;list-style-type: none;\u0026#34;\u0026gt; B: [Link](http://example.com)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;   That worked:\nA: Link\nB: Link\nSome people may not care too much about their site\u0026rsquo;s generated HTML, but if you do, you may find this solution is even less ideal once you view the source in a browser. That blank line not only introduces a new paragraph, but the p is opened after the div/li and isn\u0026rsquo;t closed until after the div/ul are closed.\n1 2 3 4 5  \u0026lt;div style=\u0026#34;margin-left: 2em;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;A: \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li style=\u0026#34;list-style-type: none;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;B: \u0026lt;a href=\u0026#34;http://example.com\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/p\u0026gt;    While browsers are pretty forgiving and try to understand what\u0026rsquo;s intended, opening and closing HTML tags should be handled like a Last In, First Out (LIFO) stack. Whichever tag you open last should be closed first.\n  Stack Good: \u0026lt;b\u0026gt;\u0026lt;i\u0026gt;Last In, First Out (LIFO)\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt;\n  Queue Bad: \u0026lt;b\u0026gt;\u0026lt;i\u0026gt;First In, First Out (FIFO)\u0026lt;/b\u0026gt;\u0026lt;/i\u0026gt;\n\nThe Solution In this case, a better indent solution is to use a simple span styled as an inline-block with an appropriate left margin.\nWrapping the markdown link with the span works fine:\n1  \u0026lt;span style=\u0026#34;display:inline-block; margin-left: 2em;\u0026#34;\u0026gt;C: [Link](http://example.com)\u0026lt;/span\u0026gt;   Closing the span before the markdown is even cleaner:\n1  \u0026lt;span style=\u0026#34;display:inline-block; margin-left: 2em;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;D: [Link](http://example.com)   C: Link\nD: Link\n\nThe Shortcode To avoid having to insert custom individually styled spans everytime I want to indent something, I created a shortcode to simply things.\n \u0026lt;root\u0026gt;\n layouts\n shortcodes\n indent.html\n1 2 3 4 5  {{- if isset .Params 0 -}} \u0026lt;span style=\u0026#34;display:inline-block; width:{{ .Get 0 }};\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{- else -}} \u0026lt;span style=\u0026#34;display:inline-block; width:2em;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{- end -}}   The argument after indent is optional. It will default to 2em. When using a %, wrap the value in quotes.\n1 2 3 4 5  {{â\u0026lt; indent \u0026gt;}}E: [Default Indent](#e)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; {{â\u0026lt; indent 2em \u0026gt;}}E: [2em Indent](#e)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; {{â\u0026lt; indent 32px \u0026gt;}}E: [32px Indent](#e)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; {{â\u0026lt; indent 3rem \u0026gt;}}E: [3rem Indent](#e)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; {{â\u0026lt; indent \u0026#34;10%\u0026#34; \u0026gt;}}E: [10% Indent](#e)\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;   E: Default Indent\nE: 2em Indent\nE: 32px Indent\nE: 3rem Indent\nE: 10% Indent\nEnjoy ","description":"A quick little shortcode for inserting indents in markdown.","id":5,"section":"posts","tags":["markdown","hugo","shortcode"],"title":"An Indent Shortcode for Hugo","uri":"http://somethingstrange.com/posts/hugo-indent-shortcode/"},{"content":"I grew up in the 80s, during the golden age of arcade video games and the early days of home computing, and it\u0026rsquo;s hard to overstate the influence video games and 8-bit computers had on me.\nA great many hours were spent sitting with my family in the living room, huddled around the only television in the house, to play games like Pitfall, Keystone Kapers and Yar\u0026rsquo;s Revenge on the Atari 2600. One of my favorites was River Raid, with its endless gameplay provided by procedural terrain generation and enemy placement.\nThe Atari was great, but everything changed for me when I received a Commodore 64 for Christmas in 1982. Compared to the Atari, it had superior graphics and sound, an integrated keyboard, and an amazing 64K of RAM. 64K! More importantly, within minutes of plugging the computer in, I was writing my first program in CBM BASIC. From that point on, I was hooked. Not only did I want to play video games, but I wanted to create \u0026rsquo;em.\nA little more than a decade later, I found myself smack-dab in the middle of the game industry when I joined the legendary Looking Glass Studios as a junior game designer. Since then, I\u0026rsquo;ve worked at several game studios, filled many development roles, released more than a dozen games on various platforms, and learned a ton along the way. Some of the games I\u0026rsquo;ve worked on include Thief: The Dark Project, System Shock 2, Eye of Rana, Dark Messiah of Might and Magic, The Bourne Conspiracy, Skylanders: Lost Islands, and Luna and the Moonling.\n     --  When I\u0026rsquo;m not hunched over my workstation in a dimly lit room, I enjoy collecting retro consoles, computers, and games from the late 1970s, 80s, and early 90s.\nMy name is Michael Ryan, and I\u0026rsquo;m a professional game developer and retro computing fanatic.\nLong live the C64!\nREADY.\nÃ ","description":"About page","id":6,"section":"","tags":null,"title":"Greetings, Programs!","uri":"http://somethingstrange.com/about/"},{"content":"Markdown goes here.\nMarkdown goes here.\nTEST\nEN\nAdded \u0026ldquo;meta_image\u0026rdquo; front matter.\nAdded \u0026ldquo;image\u0026rdquo; front matter.\n","description":"","id":12,"section":"showcase","tags":null,"title":"MX vs. ATV Alive","uri":"http://somethingstrange.com/showcase/games/mx-vs-atv-alive/"},{"content":"Markdown goes here.\nMarkdown goes here.\nTEST\nEN\nAdded \u0026ldquo;meta_image\u0026rdquo; front matter.\nAdded \u0026ldquo;image\u0026rdquo; front matter.\n","description":"","id":17,"section":"showcase","tags":null,"title":"Thief 2: The Metal Age","uri":"http://somethingstrange.com/showcase/games/thief-2/"},{"content":"Markdown goes here.\nMarkdown goes here.\nTEST\nEN\nAdded \u0026ldquo;meta_image\u0026rdquo; front matter.\nAdded \u0026ldquo;image\u0026rdquo; front matter.\n","description":"","id":18,"section":"showcase","tags":null,"title":"Thief Gold","uri":"http://somethingstrange.com/showcase/games/thief-gold/"},{"content":"Markdown goes here.\nMarkdown goes here.\nTEST\nEN\nAdded \u0026ldquo;meta_image\u0026rdquo; front matter.\nAdded \u0026ldquo;image\u0026rdquo; front matter.\n","description":"","id":19,"section":"showcase","tags":null,"title":"Thief: The Dark Project","uri":"http://somethingstrange.com/showcase/games/thief/"},{"content":"Gathered from various sources, including The Markdown Guide, GitHub, and others.\nPersonal reference and for testing this site\u0026rsquo;s theme to ensure markdown is rendered correctly.\nThis Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It canât cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.\nBasic Syntax These are the elements outlined in John Gruberâs original design document. All Markdown applications support these elements.\nParagraphs are separated by a blank line.\nEmphasis is given with italic, bold, and monospace.\n1  Emphasis is given with *italic*, **bold**, and `monospace`.   Headings There are six heading levels (h1 -\u0026gt; h6).\nTo insert a heading, start a line with one or more hash (#) characters, followed by a space character and the heading label. The number of hash characters used will determine the heading level.\n# h1 ## h2 ### h3 #### h4 ##### h5 ###### h6 Alternatively, a line of text may be converted to a level 1 heading by placing one or more equals (=) characters on the line beneath it. A level 2 heading can be created by using minus (-) characters instead.\nh1 ================ h2 ---------------- Emphasis  This text will be italic\nThis will also be italic\nThis text will be bold\nThis will also be bold\nThis text will have a strikethrough it\nYou can sometimes combine them\n 1 2 3 4 5 6  *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ ~~This text will have a strikethrough it~~ _You **can ~~sometimes~~** combine them_   Block Quotation  Block quotes are\nwritten like so.\nThey can span multiple paragraphs,\nif you like.\n \u0026gt; Block quotes are \u0026gt; written like so. \u0026gt; \u0026gt; They can span multiple paragraphs, \u0026gt; if you like. Lists Unordered list items use * or - at the start of the line, and are indented with two or more spaces to increase the level:\n  Item 1 Item 2  Item 2a Item 2b     1 2 3 4  * Item 1 * Item 2 * Item 2a * Item 2b   Ordered list items are preceded by one or more digits, followed by a . and a space (1. ). Numbering increases with each successive item at the same indent level. Items may be indented with two or more spaces. Increasing the indent level will restart number at the new level.\n  First item Second item  Item 2a Item 2b  Item 2b.1 Item 2b.2     Third item  \u0026hellip;\nExplicitly resumed previous numbering.   1 2 3 4 5 6 7 8 9 10 11  1. First item 1. Second item 1. Item 2a 1. Item 2b 1. Item 2b.1 1. Item 2b.2 1. Third item ... 4. Explicitly resumed previous numbering.   Code Inline code is wrapped with backticks `.\n In C#, int is a built-in type alias for System.Int32.\n 1  In C#, `int` is a built-in type alias for `System.Int32`.   A \u0026ldquo;fenced\u0026rdquo; multi-line code block can be inserted by placing triple backticks ``` before and after the code block. The code language can be optionally set, which may influence syntax highlighting.\n 1 2 3 4  void DoSomethingCool() { // put some cool code here ... }    1 2 3 4 5 6  ```c# void DoSomethingCool() { // put some cool code here ... } ```   You can also simply indent your code by four spaces, however this method does not allow the language to be set and no syntax highlighting will be shown:\n1 2 3 4  void DoSomethingCool() { // put some cool code here ... }   To include a non-code formatted backtick, escape it with a \\.\n This is a backtick outside of code: `\n 1  This is a backtick outside of code: \\`   To include a backtick in formatted code, wrap the character in a double-backtick.\n This is a backtick in code: `\n 1  This is a backtick in code: `` ` ``   Horizontal Line You can insert a line with  ---\n1  ---   Link Any URL (like http://example.com/) will be automatically converted into a clickable link.\nInline Use this format [title](https://www.example.com) to set the inline link title and address separately.\n http://github.com - automatic!\nHere is a relative link to the local readme file\nAn external link to the unity documentation\nA link to the top of this document (section header)\n 1 2 3 4 5  http://github.com - automatic! Here is a relative link to the local [readme](readme.md) file An an external link to the [unity documentation](https://unity3d.com/) An link to [the top](#root) of this document (section header)   Reference Place link definitions anywhere in your Markdown document, such as immediately after the paragraph in which theyâre used, or together at the end of the document, sort of like footnotes.\nThe optional title attribute must be enclosed in single quotes, double quotes, or parentheses, and it may be placed on the next line, which tends to look better with longer URLs:\n1 2 3 4 5 6  [id]: http://example.com/ \u0026#39;Optional Title Here\u0026#39; [google]: http://google.com/ \u0026#34;Google\u0026#34; [c64]: https://en.wikipedia.org/wiki/Commodore_64 (Commodore 64)   Reference the link using the double or single set of square brackets. The reference label is case-insensitive and multiple links can reference the same definition.\n Did you search for that already?\nThe Commodore 64 is the best selling single computer model of all time.\nI ð my C64.\n 1 2 3 4  Did you [search][google] for that already? The [Commodore 64][c64] is the best selling single computer model of all time. I :âheartpulse: my [C64].   Image Images may be inserted using the following markdown syntax.\n![alt text](/path/to/image.png \u0026quot;MouseOver tooltip text\u0026quot;) \nThe \u0026ldquo;alt text\u0026rdquo; is used by screen readers and rendered when the image fails to load. The tooltip text following the image address is optional and will only appear when the mouse cursor hovers over the image.\n  1  ![random photo](https://loremflickr.com/320/240 \u0026#34;An image!\u0026#34;)   Nesting You can nest items in a list \u0026hellip;\n   First, get these ingredients:\n carrots celery lentils    Boil some water.\n  Dump everything in the pot and follow\nthis algorithm:\nfind wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done)  Do not bump wooden spoon or it will fall.\n   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  1. First, get these ingredients: * carrots * celery * lentils 2. Boil some water. 3. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall.   Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\nTable A table consists of one or more columns and rows, as well as a required header row.\nUse pipes (|) to separate columns and three or more hyphens (---) to separate the header row from all other rows. For compatibility, a pipe should also be used at the beginning and end of each row.\n    Column 1 Header Column 2 Header     Column 1 Row 1 Column 2 Row 1   Column 1 Row 2 Column 2 Row 2      1 2 3 4  | Column 1 Header | Column 2 Header | | --------------- | --------------- | | Column 1 Row 1 | Column 2 Row 1 | | Column 1 Row 2 | Column 2 Row 2 |   Nested in a Blockquote Custom CSS on this site allows table markdown to be used inside a blockquote by wrapping the markup with a div.table-wrapper.\n1 2 3 4 5 6 7  \u0026lt;div class=\u0026#34;table-wrapper\u0026#34;\u0026gt; \u0026gt; | Column 1 Header | Column 2 Header | \u0026gt; | --------------- | --------------- | \u0026gt; | Column 1 Row 1 | Column 2 Row 1 | \u0026gt; | Column 1 Row 2 | Column 2 Row 2 | \u0026lt;/div\u0026gt;   Hiding Header Rows While table header rows are required, they may also be hidden by wrapping the markdown with a div.table-wrapper.no-header.\n    Column 1 Header Column 2 Header     Column 1 Row 1 Column 2 Row 1   Column 1 Row 2 Column 2 Row 2         Column 1 Header Column 2 Header     Column 1 Row 1 Column 2 Row 1   Column 1 Row 2 Column 2 Row 2     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;div class=\u0026#34;table-wrapper no-header\u0026#34;\u0026gt; \u0026gt; | Column 1 Header | Column 2 Header | \u0026gt; | --------------- | --------------- | \u0026gt; | Column 1 Row 1 | Column 2 Row 1 | \u0026gt; | Column 1 Row 2 | Column 2 Row 2 | \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;table-wrapper no-header\u0026#34;\u0026gt; | Column 1 Header | Column 2 Header | | --------------- | --------------- | | Column 1 Row 1 | Column 2 Row 1 | | Column 1 Row 2 | Column 2 Row 2 | \u0026lt;/div\u0026gt;   Aligning Cell Data Header and cell data can be aligned to the left, right, or center of a the column by inserting colons between hyphens and pipes on the header separator line.\n |:--- | Left align with the colon prefix | ---:| Right align with the colon suffix |:---:| Center the data with prefix and suffix colon.     Header1 Header2 Header3     Left-aligned text Right-aligned text Centered text   column 1 column 2 column 3    1 2 3 4  | Header1 | Header2 | Header3 | | :---------------- | -----------------: | :-----------: | | Left-aligned text | Right-aligned text | Centered text | | column 1 | column 2 | column 3 |   Emoji  ð ð ð\n 1  :âsee_no_evil: :âhear_no_evil: :âspeak_no_evil:   The Emoji cheat sheet is a useful reference for emoji shorthand codes.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 4  .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }   Footnote Like reference links links, footnote definitions can be placed anywhere in the document, however the id must be prefixed with a caret (^).\nThe footnotes may include multiple paragraphs and other markdown. Simply indent the lines following the definition to include them.\nFootnotes are enumerated in the order they are referenced, so the definition order does not matter. Footnotes that are defined, but not referenced are ignored.\n1 2 3 4 5 6 7 8 9 10  [^first]: This is the first defined footnote. [^second]: This is the second defined footnote. Indent paragraphs to include them in the footnote. `{ my code }` Add as many paragraphs as you like. [^third]: This is the third defined footnote will be unused.   Elsewhere in the document, the footnote may be referenced using the same id.\n Reference the second defined footnote. 1\nReference the first defined footnote. 2\n 1 2  Reference the second defined footnote. [^second] Reference the first defined footnote. [^first]   At the end of the document, the footnotes will appear in the order in which they are referenced:\n1. This is the second defined footnote. Indent paragraphs to include them in the footnote. { my code } Add as many paragraphs as you like. â©ï¸ 2. This is the first defined footnote. â©ï¸ Heading ID A custom id and class can be added to headers.\n â#### My Great Heading {#custom-id .custom-class}\n 1  #### My Great Heading {#custom-id .custom-class}   Definition List To create a definition list, type the term on the first line. On the next line, type a colon followed by a space and the definition.\n  First Term This is the definition of the first term. Second Term This is one definition of the second term. This is another definition of the second term.   1 2 3 4 5 6  First Term : This is the definition of the first term. Second Term : This is one definition of the second term. : This is another definition of the second term.   Task List  links, formatting, and tags supported list syntax required (any unordered or ordered list supported) this is a complete item this is an incomplete item  Styled HTML Tags Use HTML for other Elements â abbr, sub, sup, kbd, mark\nabbr GIF is a bitmap image format.\nsub H2O\nsup Xn + Yn: Zn\nkbd The standard kbd HTML tag is styled to look like a key. For combo commands, wrap the full command set in a kbd with the .combo class so that it will be styled as a set won\u0026rsquo;t wrap.\n Press Enter when finished.\nPress CTRL+ALT+DEL to access Task Manager.\n 1 2  Press \u0026lt;kbd\u0026gt;Enter\u0026lt;/kbd\u0026gt; when finished. Press \u0026lt;span class=\u0026#34;kbd-combo\u0026#34;\u0026gt;\u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;ALT\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;DEL\u0026lt;/kbd\u0026gt;\u0026lt;/span\u0026gt; to access Task Manager.   This site has a shortcode for simplifying keyboard key combos, which accepts one or more parameters. Parameters with non-alphanumeric args must be quoted, for example:\n \u0026quot;#\u0026quot; -\u0026gt; #\n`\u0026amp;` -\u0026gt; \u0026amp;\n`\u0026quot;` -\u0026gt; \u0026#34;\n\u0026quot;`\u0026quot; -\u0026gt; `\n Parameters are converted to title case (tab -\u0026gt; Tab), however some may be formatted for consistent output, such as:\n print and PrintScreen -\u0026gt; PrtSc\ncaps and CapsLock -\u0026gt; CapsLk\nnum= and NUM = -\u0026gt; Num =\nDOWN and downArrow -\u0026gt; â¼\n When more than one parameter is provided, the combination is linked and will not wrap.\n Press Ctrl+Alt+Del to access Task Manager.\n 1  Press {{â\u0026lt; kbd CONTROL ALT DELETE \u0026gt;}} to access Task Manager.   EscF1F2F3F4F5F6F7F8F9Â­F10Â­F11Â­F12\n`1234567890â=BkSp\nTabQWERTYUIOP[]\\\nCapsLkASDFGHJKL;\u0026#39;Return\nLShiftZXCVBNM,./RShift\nLCtrlLWinLAltSpaceRAltRWinÂ­MenuÂ­RCtrl\nNumLkNum /Num *Num â\nNum 7Num 8Num 9Num \u0026#43;\nNum 4Num 5Num 6Num =\nNum 1Num 2Num 3\nNum 0Num .Enter\n~!@#$%^\u0026amp;*()Â­_\u0026#43;{}|:\u0026#34;\u0026lt;\u0026gt;?\nInsHomePgUpDelEndPgDnÂ­PrtScScrLkPauseSysReqBreak\nâ²â¼ââ¶FnLCmdRCmdLOptÂ­ROptClearAltGrHelp\nDuplicate keys are removed and recognized modifier keys are sorted for consistency. Apple has explicit guidelines on the modifier order, however things are a little more flexible in Windows. This is the order used by Unity shortcuts, so that\u0026rsquo;s what I\u0026rsquo;m going with.\n CtrlAltShiftWin\n CtrlOptShiftCmd\n Control, Alt, Option, Shift, Windows, Command, Fn\nCtrl+Opt+Shift+Cmd+Fn+K\nCtrl+Alt+Shift+Win+Fn+K\n 1 2  {{â\u0026lt; kbd K OPTION CONTROL FUNCTION COMMAND SHIFT \u0026gt;}} {{â\u0026lt; kbd ALT K WIN CONTROL FUNCTION SHIFT \u0026gt;}}   mark Most salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n This is the second defined footnote.\nIndent paragraphs to include them in the footnote.\n{ my code }\nAdd as many paragraphs as you like.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n This is the first defined footnote.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"An arcane tome of hexes, spells, and formulae that demonstrate the wicked power of markdown.","id":21,"section":"posts","tags":["markdown"],"title":"The Markdown Grimoire","uri":"http://somethingstrange.com/posts/the-markdown-grimoire/"}]