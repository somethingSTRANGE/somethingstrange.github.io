<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on somethingSTRANGE</title><link>http://somethingstrange.com/posts/</link><description>Recent content in Posts on somethingSTRANGE</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}. All content is licensed under &lt;a target='_blank' rel='external noopener' href='https://www.apache.org/licenses/LICENSE-2.0'>Apache License 2.0&lt;/a>.</copyright><lastBuildDate>Fri, 15 Jan 2021 16:52:17 -0800</lastBuildDate><atom:link href="http://somethingstrange.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo with Font Awesome</title><link>http://somethingstrange.com/posts/hugo-with-fontawesome/</link><pubDate>Sun, 31 Oct 2021 01:10:00 -0800</pubDate><atom:modified>Sun, 31 Oct 2021 01:10:00 -0800</atom:modified><guid>http://somethingstrange.com/posts/hugo-with-fontawesome/</guid><description>Font Awesome is an icon font. It&amp;rsquo;s used all over the place. I use it when developing editor tools for my Unity projects. I love it. It&amp;rsquo;s awesome.
I just started working on this site and I chose to build it with Hugo, which is a very popular open-source static site generator. So far, I like it a lot, but I was keenly interested in adding support for Font Awesome.</description><dc:creator>Michael Ryan</dc:creator><media:content url="http://somethingstrange.com/images/posts/windows-terminal.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Hugo</category><category>Font Awesome</category><category>development</category><category>web</category></item><item><title>Unity Annoyances</title><link>http://somethingstrange.com/posts/unity-annoyances/</link><pubDate>Fri, 01 Oct 2021 01:10:00 -0800</pubDate><atom:modified>Fri, 01 Oct 2021 01:10:00 -0800</atom:modified><guid>http://somethingstrange.com/posts/unity-annoyances/</guid><description>UNITY UNITY UNITY Use the following fonts and point sizes for headlines, text, annotations, and non-Latin characters.
HEADLINES ‚ûî PLATFORM MEDIUM CAPS ‚ûî TRACKING 190PT ‚ûî LEADING = TYPE SIZE + 10% TEXT ‚ûû INTER REGULAR ‚ûû TRACKING 10PT ‚ûû LEADING = TYPE SIZE + 10% TEXT ü†ñ INTER BOLD ü†ñ TRACKING 10PT ü†ñ LEADING = TYPE SIZE + 10% ANNOTATIONS ‚ü∂ INTER BOLD CAPS ‚ü∂ TRACKING 270PT ‚ü∂ LEADING = TYPE SIZE + 20% NON-LATIN ‚ûú NOTO SANS CKJ KR ‚ü∂ ‚üµ ‚Üê ‚Üí ‚Üñ ‚Üó ‚Üò ‚Üô ‚Üî ‚Üë ‚Üì There.</description><dc:creator>Michael Ryan</dc:creator><media:content url="http://somethingstrange.com/images/posts/windows-terminal.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>OnBackingFieldChanged in the Unity Inspector</title><link>http://somethingstrange.com/posts/onbackingfieldchanged-in-the-unity-inspector/</link><pubDate>Fri, 22 Jan 2021 13:10:00 -0800</pubDate><atom:modified>Fri, 22 Jan 2021 13:10:00 -0800</atom:modified><guid>http://somethingstrange.com/posts/onbackingfieldchanged-in-the-unity-inspector/</guid><description>It&amp;rsquo;s a commonly accepted best practice that fields should be private, inaccessible to outside classes, and not be part of an API. When necessary, explicit data accessors should be used for public access to class data.
In C#, this encapsulation can be achieved using properties. There are numerous advantages to using properties over fields, such as being able to make data &amp;ldquo;read-only&amp;rdquo; or &amp;ldquo;write-only&amp;rdquo;, being able to validate data when it&amp;rsquo;s set, and sending out event notifications when data is changed, to name a few.</description><dc:creator>Michael Ryan</dc:creator></item><item><title>OnPropertyChanged in the Unity Inspector</title><link>http://somethingstrange.com/posts/onpropertychanged-in-the-unity-inspector/</link><pubDate>Fri, 22 Jan 2021 13:10:00 -0800</pubDate><atom:modified>Fri, 22 Jan 2021 13:10:00 -0800</atom:modified><guid>http://somethingstrange.com/posts/onpropertychanged-in-the-unity-inspector/</guid><description>Summary Property change notifications are great, but the Unity Inspector doesn&amp;rsquo;t trigger them when data is changed in the Inspector. Unity serializes fields not properties. The Odin Inspector and Serializer is an essential plugin for Unity that provides many powerful editor enhancements, some of which can be used to alleviate this issue, but it not a magic bullet. In this post, I&amp;rsquo;ll cover how Odin can help solve the issue and then provide some enhancements to leave you with a near perfect remedy.</description><dc:creator>Michael Ryan</dc:creator><media:content url="http://somethingstrange.com/images/posts/windows-terminal.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>Public Fields are Bad</title><link>http://somethingstrange.com/posts/unity-public-fields-are-bad/</link><pubDate>Fri, 22 Jan 2021 13:10:00 -0800</pubDate><atom:modified>Fri, 22 Jan 2021 13:10:00 -0800</atom:modified><guid>http://somethingstrange.com/posts/unity-public-fields-are-bad/</guid><description>According to Microsoft&amp;rsquo;s C# Programming Guide, fields should rarely be public.
Generally, you should use fields only for variables that have private or protected accessibility. Data that your type exposes to client code should be provided through methods, properties, and indexers.
It&amp;rsquo;s unfortunate that the Unity website features so many simple code samples that feature public fields being used, especially since Unity provides the SerializedField attribute which can be applied to private fields, allowing them to be serialized and shown in the Inspector the same way public¬†fields are.</description><dc:creator>Michael Ryan</dc:creator><media:content url="http://somethingstrange.com/images/posts/windows-terminal.png" medium="image"><media:title type="html">featured image</media:title></media:content></item><item><title>Windows Terminal</title><link>http://somethingstrange.com/posts/windows-terminal/</link><pubDate>Fri, 22 Jan 2021 13:10:00 -0800</pubDate><atom:modified>Fri, 22 Jan 2021 13:10:00 -0800</atom:modified><guid>http://somethingstrange.com/posts/windows-terminal/</guid><description>Links https://www.microsoft.com/store/productId/9N0DX20HK701
https://github.com/microsoft/terminal
The Windows Terminal is a modern, fast, efficient, powerful, and productive terminal application for users of command-line tools and shells like Command Prompt, PowerShell, and WSL. Its main features include multiple tabs, panes, Unicode and UTF-8 character support, a GPU accelerated text rendering engine, and custom themes, styles, and configurations.
üö¶ü§∏‚Äç‚ôÇÔ∏èüöôüöóüöï
Formatting Paragraphs are separated by a blank line.
Emphasis is given with italic, bold, and monospace.</description><dc:creator>Michael Ryan</dc:creator><media:content url="http://somethingstrange.com/images/posts/windows-terminal.png" medium="image"><media:title type="html">featured image</media:title></media:content></item></channel></rss>